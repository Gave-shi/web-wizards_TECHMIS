CREATE TABLE Lecture(
LecId VARCHAR(4) NOT NULL,
LecName VARCHAR(100),
LecEmail VARCHAR(50),
LecContact VARCHAR(15) ,
LecPosition VARCHAR(60),
PRIMARY KEY (LecId)
);


CREATE TABLE Course(
CouId VARCHAR (10) NOT NULL,
CouName VARCHAR (50),
CouCredit INT,
CrediT INT,
CourType VARCHAR (30),
PRIMARY KEY(CouId));

INSERT INTO Lecture
VALUES
('L001','Prof. P.K.S.C Jayasinghe','subash@ictec.ruh.ac.lk','0711234567','Senior Lecturer'),
('LOO2','Mr. P.H.P.N Laksiri','phpnlaksiri@ictec.ruh.ac.lk','0711234567','Lecturer'),
('L003','Ms. Rumeshika W. arachi','rumeshika@ictec.ruh.ac.lk','0711234567','Lecturer(Probationary)'),
('L004','Ms. Malsha Prabuddhi','malsha@ictec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L005','Ms. Chanduni Gamage','chanduni@ictec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L006','Ms. E.H.M.P.M. Wijerathna','piyumi@ictec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L007','Ms. R.D.N. Shakya','shakya@ictec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L008','Ms. Akila Brahmana','akila@ictec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L009','Mr. A.W.A.T. Dilhan','dilhan@ictec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L010','Mr. Shashitha Lakal','shashithal@ictec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L011','Dr. Thissa Karunarathna','thissa@btec.ruh.ac.lk','0711234567','Senior Lecturer'),
('L012','Professor E.P.S. Chandana','epschandana@btec.ruh.ac.lk','0775909665','Deputy Vice Chancellor,University of Ruhuna'),
('L013','Dr. K.M.W Rajawaththa','wathsala@btec.ruh.ac.lk','0711234567','Senior Lecturer'),
('L014','Dr. Niranjan Kannangara','niranjan@btec.ruh.ac.lk','0711234567','Lecturer (Unconfirmed)'),
('L015','Dr. K.G.S.Harshadewa Gunawardana','harshadewa@etec.ruh.ac.lk','0711234567','Senior Lecturer'),
('L016','Ms.B.H.C. Sanjeewani Thilakarathna','sanjeewani@fot.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L017','Eng. Ms. J.W. Achini','achini@etec.ruh.ac.lk','0711234567','Lecturer (Probationary)'),
('L018','Eng Mr. H.V.H.H.Senavirathna','Eng Mr. H.V.H.H.Senavirathna','0711234567','Lecturer (Probationary)');


INSERT INTO Course
VALUES
('ICT1212','Database Management Systems',2,15,'Theory'),
('ICT1222','Database Management Systems Practicum',2,15,'Practical'),
('ICT1233','Server-Side Web Development',3,30,'Both'),
('ICT1242','Computer Architecture',2,15,'Theory'),
('ICT1253','Computer Networks',3,30,'Both'),
('TMS1223','Discrete Mathematics',3,15,'Theory'),
('ENG1222','English II',2,15,'Theory'),
('TCS1212','Fundamentals of Management',2,15,'Theory');




CREATE TABLE Student_Eligibility (
    student_id VARCHAR(10) NOT NULL,
    course_id CHAR(7) NOT NULL,
    ca_marks DECIMAL(5, 2) NOT NULL, -- Continuous Assessment Marks
    attendance_percentage DECIMAL(5, 2) NOT NULL, -- Attendance Percentage
   -- scaled_CA_marks DECIMAL(5, 2),
    eligibility_status VARCHAR(20)/* GENERATED ALWAYS AS (
        CASE 
            WHEN attendance_percentage >= 80 AND scaled_CA_marks >= 50 THEN 'Eligible'
            ELSE 'Not Eligible'
        END
    ) STORED,*/
    
);




--Eligibility TO English_ICT1222_marks EM-------
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    EM.student_id,
    'ENG1222' AS course_id, -- Replace with the actual course ID
    (EM.Final_CA_marks * 100) / 40 AS ca_marks, -- Assuming Final_CA_marks is scaled out of 40
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (EM.Final_CA_marks * 100) / 40 >= 50 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS eligibility_status 
FROM 
    English_ENG1222_marks AS EM
JOIN 
    Student_Attandance SA ON EM.student_id = SA.Stu_reg_num; -- Ensure this matches the correct field in the Attendance Table




--Eligibility TO Management_ICT1212_marks MM---------------------
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    MM.student_id,
    'TCS1212' AS course_id,
    (MM.Final_CA_marks*100)/40 AS ca_marks,
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (MM.Final_CA_marks * 100) / 40 >= 50 THEN 'Eligible'
    ELSE 'Not Eligible'
    END AS eligibility_status 
    FROM 
        Management_TCS1212_marks AS MM
    JOIN 
        Student_Attandance SA ON MM.student_id=SA.Stu_reg_num;




    
-- Eligibility TO  DBMS_Theory_ICT1212_marks-------------------
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    DBT.student_id,
    'ICT1212' AS course_id,
    (DBT.Final_CA_marks*100)/30 AS ca_marks,
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (DBT.Final_CA_marks * 100) / 30 >= 50 THEN 'Eligible'
    ELSE 'Not Eligible'
    END AS eligibility_status 
    FROM 
        DBMS_Theory_ICT1212_marks AS DBT
    JOIN 
        Student_Attandance SA ON DBT.student_id=SA.Stu_reg_num;





-- Eligibility TO  DBMS_Practical_ICT1222_marks----------------
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    DBP.student_id,
    'ICT1222' AS course_id,
    (DBP.Final_CA_marks*100)/30 AS ca_marks,
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (DBP.Final_CA_marks * 100) / 30 >= 50 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS eligibility_status 
    FROM 
        DBMS_Practical_ICT1222_marks AS DBP
    JOIN 
        Student_Attandance SA ON DBP.student_id=SA.Stu_reg_num;







-- Eligibility TO  Serverside_ICT1233_marks----
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    SS.student_id,
    'ICT1233' AS course_id,
    (SS.Final_CA_marks*100)/40 AS ca_marks,
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (SS.Final_CA_marks * 100) / 40 >= 50 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS eligibility_status 
    FROM 
        Serverside_ICT1233_marks AS SS
    JOIN 
        Student_Attandance SA ON SS.student_id=SA.Stu_reg_num;






-- Eligibility TO  computer_Archi_ICT1242_marks-----------
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    CAM.student_id,
    'ICT1242' AS course_id,
    (CAM.Final_CA_marks*100)/40 AS ca_marks,
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (CAM.Final_CA_marks * 100) / 40 >= 50 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS eligibility_status 
    FROM 
        computer_Archi_ICT1242_marks AS CAM
    JOIN 
        Student_Attandance SA ON CAM.student_id=SA.Stu_reg_num;






-- Eligibility TO  CompNetwork_ICT1233_marks----
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    CNM.student_id,
    'ICT1253' AS course_id,
    (CNM.Final_CA_marks*100)/30 AS ca_marks,
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (CNM.Final_CA_marks * 100) / 30 >= 50 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS eligibility_status 
    FROM 
        CompNetwork_ICT1253_marks AS CNM
    JOIN 
        Student_Attandance SA ON CNM.student_id=SA.Stu_reg_num;




-- Eligibility TO  Discrete_maths_ICT1233_marks----------
INSERT INTO Student_Eligibility (student_id, course_id, ca_marks, attendance_percentage, eligibility_status)
SELECT 
    DM.student_id,
    'TMS1223' AS course_id,
    (DM.Final_CA_marks*100)/40 AS ca_marks,
    SA.Percentage AS attendance_percentage,
    CASE 
        WHEN SA.Percentage >= 80 AND (DM.Final_CA_marks * 100) / 40 >= 50 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS eligibility_status 
    FROM 
        Discrete_maths_TMS1233_marks DM
    JOIN 
        Student_Attandance SA ON DM.student_id=SA.Stu_reg_num;









------------------------ check eligibility  as individuals ----------------------------------
SELECT 
    student_id,
    course_id,
    eligibility_status
FROM 
    Student_Eligibility
WHERE 
    student_id='TG/2022/1415';

------------------------- check eligibility for the whole batch-------------------------------
SELECT 
    student_id,
    course_id,
    eligibility_status
FROM 
    Student_Eligibility
WHERE 
    SUBSTRING(student_id, 4, 4) = '2022'; -- Filtering for batch 2022






-----------------------------------Student_Performance (GPA) TABLE -------------------------------------

CREATE TABLE Student_Performance (
    student_id VARCHAR(10) NOT NULL,
    semester INT NOT NULL,
    total_credits INT DEFAULT 0,
    total_grade_points DECIMAL(10, 2) DEFAULT 0.00,
    SGPA DECIMAL(3, 2) GENERATED ALWAYS AS (
        CASE 
            WHEN total_credits = 0 THEN 0.00
            ELSE total_grade_points / total_credits
        END
    ) STORED,
    GPA DECIMAL(3, 2) GENERATED ALWAYS AS (
        CASE 
            WHEN total_credits = 0 THEN 0.00
            ELSE total_grade_points / total_credits
        END
    ) STORED,
    CGPA DECIMAL(3, 2) DEFAULT 0.00,  -- This will need to be updated periodically
    PRIMARY KEY (student_id, semester),
    FOREIGN KEY (student_id) REFERENCES STUDENT(student_id)
);



-- Now insert data into Student_Performance
INSERT INTO Student_Performance (student_id, semester, total_credits, total_grade_points)
SELECT 
    sg.student_id,
    sg.semester,
    SUM(c.CouCredit) AS total_credits,
    SUM(c.CouCredit * 
        CASE 
            WHEN sg.grade = 'A+' THEN 4.00
            WHEN sg.grade = 'A'  THEN 4.00
            WHEN sg.grade = 'A-' THEN 3.70
            WHEN sg.grade = 'B+' THEN 3.30
            WHEN sg.grade = 'B'  THEN 3.00
            WHEN sg.grade = 'B-' THEN 2.70
            WHEN sg.grade = 'C+' THEN 2.30
            WHEN sg.grade = 'C'  THEN 2.00
            WHEN sg.grade = 'C-' THEN 1.70
            WHEN sg.grade = 'D'  THEN 1.00
            WHEN sg.grade = 'E'  THEN 0.00
            ELSE 0.00
        END
    ) AS total_grade_points
FROM 
    Student_grade AS sg
JOIN 
    Course AS c ON sg.Course_id = c.CouId
GROUP BY 
    sg.student_id, sg.semester;


----------------------------------Procedure to Calculate SGPA for a Single Student------------------------
DELIMITER //

CREATE PROCEDURE Calculate_SGPA(IN studentID VARCHAR(10), OUT sgpa DECIMAL(5,2))
BEGIN
    SELECT 
        SUM(gp.grade_point) / COUNT(*) INTO sgpa
    FROM 
        Student_Grades sg
    JOIN 
        Grade_Points gp ON sg.grade = gp.grade
    WHERE 
        sg.student_id = studentID;
END //

DELIMITER ;
-----------------------------------Procedure to Calculate CGPA for a Single Student------------------------
DELIMITER //

CREATE PROCEDURE Calculate_CGPA(IN studentID VARCHAR(10), OUT cgpa DECIMAL(5,2))
BEGIN
    SELECT 
        AVG(sgpa) INTO cgpa
    FROM 
        (SELECT 
            SUM(gp.grade_point) / COUNT(*) AS sgpa
         FROM 
            Student_Grades sg
         JOIN 
            Grade_Points gp ON sg.grade = gp.grade
         WHERE 
            sg.student_id = studentID
         GROUP BY 
            sg.subject_code) AS temp;
END //

DELIMITER ;
-------------------------------------Procedure to Calculate Average SGPA for All Students in a Batch----------------
DELIMITER //

CREATE PROCEDURE Calculate_Batch_SGPA(OUT batch_avg_sgpa DECIMAL(5,2))
BEGIN
    SELECT 
        AVG(sgpa) INTO batch_avg_sgpa
    FROM 
        (SELECT 
            SUM(gp.grade_point) / COUNT(*) AS sgpa
         FROM 
            Student_Grades sg
         JOIN 
            Grade_Points gp ON sg.grade = gp.grade
         GROUP BY 
            sg.student_id) AS temp;
END //

DELIMITER ;
------------------------------------Calling the Procedures----------------------------------------
---------------------------------------------------------------------------------------------------
------------------------------Calculate SGPA for a Student-----------------------------------------
CALL Calculate_SGPA('TG/2022/1415', @student_sgpa);
SELECT @student_sgpa AS SGPA;

-------------------------------Calculate CGPA for a Student----------------------------------------
CALL Calculate_CGPA('TG/2022/1415', @student_cgpa);
SELECT @student_cgpa AS CGPA;

--------------------------------Calculate Average SGPA for All Students in a Batch------------------
CALL Calculate_Batch_SGPA(@batch_avg_sgpa);
SELECT @batch_avg_sgpa AS Batch_Average_SGPA;

